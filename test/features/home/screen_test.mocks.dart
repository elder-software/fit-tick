// Mocks generated by Mockito 5.4.5 from annotations
// in fit_tick_mobile/test/features/home/screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:fit_tick_mobile/data/auth/auth_service.dart' as _i6;
import 'package:fit_tick_mobile/data/workout/workout.dart' as _i3;
import 'package:fit_tick_mobile/data/workout/workout_repo.dart' as _i8;
import 'package:fit_tick_mobile/features/home/home_bloc.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeState_0 extends _i1.SmartFake implements _i2.HomeState {
  _FakeHomeState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWorkout_1 extends _i1.SmartFake implements _i3.Workout {
  _FakeWorkout_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeBloc extends _i1.Mock implements _i2.HomeBloc {
  @override
  _i2.HomeState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeHomeState_0(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeHomeState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.HomeState);

  @override
  _i4.Stream<_i2.HomeState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i2.HomeState>.empty(),
            returnValueForMissingStub: _i4.Stream<_i2.HomeState>.empty(),
          )
          as _i4.Stream<_i2.HomeState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void add(_i2.HomeEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i2.HomeEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.HomeState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i2.HomeEvent>(
    _i5.EventHandler<E, _i2.HomeState>? handler, {
    _i5.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i5.Transition<_i2.HomeEvent, _i2.HomeState>? transition) =>
      super.noSuchMethod(
        Invocation.method(#onTransition, [transition]),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i5.Change<_i2.HomeState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i6.AuthService {
  @override
  _i4.Stream<_i7.User?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i4.Stream<_i7.User?>.empty(),
            returnValueForMissingStub: _i4.Stream<_i7.User?>.empty(),
          )
          as _i4.Stream<_i7.User?>);

  @override
  _i4.Future<_i7.UserCredential?> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i4.Future<_i7.UserCredential?>.value(),
            returnValueForMissingStub: _i4.Future<_i7.UserCredential?>.value(),
          )
          as _i4.Future<_i7.UserCredential?>);

  @override
  _i4.Future<_i7.UserCredential?> signUpWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i7.UserCredential?>.value(),
            returnValueForMissingStub: _i4.Future<_i7.UserCredential?>.value(),
          )
          as _i4.Future<_i7.UserCredential?>);

  @override
  _i4.Future<_i7.UserCredential?> linkAnonymousAccountWithEmail(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#linkAnonymousAccountWithEmail, [
              email,
              password,
            ]),
            returnValue: _i4.Future<_i7.UserCredential?>.value(),
            returnValueForMissingStub: _i4.Future<_i7.UserCredential?>.value(),
          )
          as _i4.Future<_i7.UserCredential?>);

  @override
  _i4.Future<_i7.UserCredential?> logInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logInWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i7.UserCredential?>.value(),
            returnValueForMissingStub: _i4.Future<_i7.UserCredential?>.value(),
          )
          as _i4.Future<_i7.UserCredential?>);

  @override
  _i4.Future<void> logOut() =>
      (super.noSuchMethod(
            Invocation.method(#logOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [WorkoutRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutRepo extends _i1.Mock implements _i8.WorkoutRepo {
  @override
  _i4.Future<void> createWorkout(_i3.Workout? workout) =>
      (super.noSuchMethod(
            Invocation.method(#createWorkout, [workout]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i3.Workout> readWorkout(String? workoutId) =>
      (super.noSuchMethod(
            Invocation.method(#readWorkout, [workoutId]),
            returnValue: _i4.Future<_i3.Workout>.value(
              _FakeWorkout_1(
                this,
                Invocation.method(#readWorkout, [workoutId]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i3.Workout>.value(
              _FakeWorkout_1(
                this,
                Invocation.method(#readWorkout, [workoutId]),
              ),
            ),
          )
          as _i4.Future<_i3.Workout>);

  @override
  _i4.Stream<List<_i3.Workout>> allWorkoutsForUser(String? userIdForQuery) =>
      (super.noSuchMethod(
            Invocation.method(#allWorkoutsForUser, [userIdForQuery]),
            returnValue: _i4.Stream<List<_i3.Workout>>.empty(),
            returnValueForMissingStub: _i4.Stream<List<_i3.Workout>>.empty(),
          )
          as _i4.Stream<List<_i3.Workout>>);

  @override
  _i4.Future<void> updateWorkout(_i3.Workout? workout) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkout, [workout]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteWorkout(String? workoutId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWorkout, [workoutId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
